#
# COPYRIGHT Ericsson 2021
#
# The copyright to the computer program(s) herein is the property of
# Ericsson Inc. The programs may be used and/or copied only with written
# permission from Ericsson Inc. or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the
# program(s) have been supplied.
#

modelVersion: 2.0

description: "Custom Ruleset of Team Fremen for Python rApps"

# See image catalog: https://confluence.lmera.ericsson.se/display/ACD/ADP+CICD+Docker+Image+Catalog
docker-images:
  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:${env.RELEASE_AUTO_TAG}
  - adp-doc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-docbuilder:${env.DOC_BUILDER_TAG}
  - adp-helm-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/common-library-adp-helm-dr-check:${env.HELM_DR_CHECK_TAG}
  - google-add-license: armdocker.rnd.ericsson.se/ghcrio-ericsson-remote/google/addlicense:${env.ADD_LICENSE_TAG}
  - adp-sonar-scanner: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-sonarscannerbuilder:${env.SONAR_SCANNER_TAG}
  - adp-maven-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-javamvnbuilder:${env.MVN_BUILDER_TAG}
  - python3-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-python3builder:${env.P3_BUILDER_TAG}
#  - adp-helm-kubectl: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-py3kubehelmbuilder:${env.HELM_KUBECTL_TAG}
#  - adp-image-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-image-dr-check:${env.IMAGE_DR_CHECK_TAG}
#  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:${env.RELEASE_AUTO_TAG}
#  - bth-linter: armdocker.rnd.ericsson.se/proj-eric-oss-drop/eric-bth/eric-bth-spectral-linter:${env.BTH_LINTER_TAG}
#  - grype-scan: ${grype-image}:${env.ANCHORE_TAG}
#  - trivy-inline-scan: ${trivy-image}:${env.TRIVY_TAG}
#  - va-scan-kubesec: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubesec:${env.KUBESEC_TAG}
#  - va-scan-kubeaudit: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubeaudit:${env.KUBEAUDIT_TAG}
#  - va-scan-kubehunter: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubehunter:${env.KUBEHUNTER_TAG}
#  - hadolint-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/hadolint-scan:${env.HADOLINT_TAG}


import:
  common: ../common-properties.yaml

# List of constants
properties:
  - grype-image: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-image-scanning-grype
  - trivy-image: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/trivy-inline-scan
  - project-subpath: proj-eric-oss
  - image-registry-path: armdocker.rnd.ericsson.se/proj-eric-oss
  - image-secret: armdocker
  - image-to-scan: ${image-ci-full-name}:${var.version}
  - image-dev-repopath: ${image-registry-path}-dev
  - image-ci-repopath: ${image-registry-path}-ci-internal
  - image-drop-repopath: ${image-registry-path}-drop
  - image-ci-full-name: ${image-ci-repopath}/${common.docker-image-name}
  - image-full-name: ${image-drop-repopath}/${common.docker-image-name}

  # Helm Chart name must follow the pattern: eric-[a-z0-9]{1,5}-[a-z0-9-]{1,30}
  - helm-chart-repo-server-path: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss
  - helm-chart-dev-repopath: ${helm-chart-repo-server-path}-dev-helm
  - helm-chart-ci-repopath: ${helm-chart-repo-server-path}-ci-internal-helm
  - helm-chart-drop-repo: ${helm-chart-repo-server-path}-drop-helm

  # Generic repository for publishing artifacts such as documentation
  - generic-drop-repo: ${helm-chart-repo-server-path}-drop-generic

  # Functional ID for your Team or CI group to push to Gerrit repo
  - git-user: ossadmin
  - git-repo-path: ${common.project-gerrit-name} # or OSS/${artifactId}  -> OSS/com.ericsson.xxx/xxx
  - git-repo-url: ssh://${git-user}@gerrit.ericsson.se:29418/${git-repo-path}  # publish rule

  # Repo Properties
  - flow-directory: "flows"
  - main-service: "OSS_CAD_Service"
  - assistant-service: "OSS_PM_Data_Handler"



# import environment variables (For example: Jenkins parameters)
env:
  - HOME
  - PWD
  - RELEASE (default=false)
  - DOCKER_VOLUME_MAPPING_PASSWD (default=--volume ${env.HOME}/mypasswd:/etc/passwd:ro)
  - PROJ_MVN (default=/proj/mvn)
  - MAVEN_CLI_OPTS (default=)
  - PIPENV_VENV_IN_PROJECT (default=1)

  # Kubernetes
  - COLLECT_LOGS_SCRIPT_LOCATION (default="https://arm.sero.gic.ericsson.se/artifactory/proj-ADP_GS_Support_FTP-generic-local/collect_ADP_logs")
  - COLLECT_LOGS_SCRIPT_FILE_NAME (default="collect_ADP_logs.sh")
  - COLLECT_LOGS_SINCE_RELATIVE_TIME (default="2h")
  - COLLECT_LOGS_DIR (default=./k8s-logs)
  - ENABLE_HELM_V3 (default=true)
  - HELM_INSTALL_TIMEOUT (default=5m0s)
  - HELM_RELEASE (default=${common.helm-chart-name}-release)
  - K8S_NAMESPACE (default=${common.helm-chart-name}-${var.commithash})
  - KUBECONFIG
  - BUILD_DIR (default=./build)
  - KAAS_INFO_FILE (default=${env.BUILD_DIR}/kaas-info.log)

  # Credentials
  - GERRIT_USERNAME
  - GERRIT_PASSWORD
  - GERRIT_CHANGE_NUMBER (default=$GERRIT_CHANGE_NUMBER)
  - SELI_ARTIFACTORY_REPO_USER
  - SELI_ARTIFACTORY_REPO_PASS
  - SERO_ARTIFACTORY_REPO_USER
  - SERO_ARTIFACTORY_REPO_PASS

  # Default docker image tags
  - ASCII_DOC_BUILDER_TAG (default=latest)
  - DOC_BUILDER_TAG (default=2.3.0-latest)
  - ELIB_MAKE_UTILITIES_TAG (default=latest)
  - HELM_DR_CHECK_TAG (default=latest)
  - HELM_KUBECTL_TAG (default=latest)
  - IMAGE_DR_CHECK_TAG (default=latest)
  - RELEASE_AUTO_TAG (default=latest)
  - MVN_BUILDER_TAG (default=latest)
  - BTH_LINTER_TAG (default=latest)
  - ADD_LICENSE_TAG (default=latest)
  - SONAR_SCANNER_TAG (default=latest)

  # VA Tools docker image tags
  - ANCHORE_TAG (default=latest)
  - TRIVY_TAG (default=latest)
  - KUBESEC_TAG (default=latest)
  - KUBEAUDIT_TAG (default=latest)
  - KUBEHUNTER_TAG (default=latest)
  - HADOLINT_TAG (default=latest)

  # SonarQube
  - SONAR_AUTH_TOKEN
  - SONAR_HOST_URL
  - SONAR_BRANCH (default="master")

  # Default docker image tags
  - DOC_BUILDER_TAG (default=2.3.0-latest)
  - HELM_DR_CHECK_TAG (default=latest)
  - RELEASE_AUTO_TAG (default=latest)
  - P3_BUILDER_TAG (default=latest)

  # BTH Linter
  - OPEN_API_SPEC_DIRECTORY (default=src/main/resources/v1)

  # X-RAY
  - XRAY_USER
  - XRAY_APIKEY

  # VHUB
  - VHUB_API_TOKEN

# Variables, set by below tasks
var:
  - version
  - version-prefix
  - rstate
  - commithash
  - commithash-full
  - commit-author
  - commit-email
  - docker-config-basepath
  - image-registry
  - image-full-name-internal
  - image-repopath-internal
  - image-repopath-drop
  - helm-chart-repo-internal
  - revision
  - image-dr-vm-args
  - kaas-version
  - kaas-current-context
  - resultcode_hadolint_check
  - save-namespace

# Rules to execute
rules:
  # Integrated rule to execute everything locally (init-dev)
  release:
    - rule: clean

  # Clean workspace
  clean:
    - task: rm
      cmd:
        - rm -rf .bob/
        - rm -rf .scannerwork/
        - rm -rf ./**/.tox/
        - rm -rf ./**/.venv/
        - rm -rf ./**/.coverage
        - rm -rf ./**/coverage_results/
        - rm -rf ./**/*-coverage.xml
    - task: mvn-clean
      docker-image: adp-maven-builder
      docker-flags: &mvn-docker-flags
        - "--env MAVEN_CLI_OPTS=\"${env.MAVEN_CLI_OPTS}\""
        - "--env HOME=${env.HOME}"
        - "--volume ${env.PROJ_MVN}:${env.PROJ_MVN}"
        - "--volume ${env.HOME}:${env.HOME}"
      cmd: mvn -f ${flow-directory}/pom.xml ${env.MAVEN_CLI_OPTS} clean

  # Common tasks for all init rules
  init-common:
    - task: version
      docker-image: adp-release-auto
      docker-flags:
        - "--env RELEASE"
      cmd: version-handler generate --is-release ${env.RELEASE} --output version --git-repo-path .
    - task: rstate
      docker-image: adp-release-auto
      cmd: get_rstate.py ${var.version} > .bob/var.rstate
    - task: commit
      docker-image: adp-release-auto
      cmd:
        - git rev-parse --short HEAD > .bob/var.commithash
        - git rev-parse HEAD > .bob/var.commithash-full
        - git log -1 --format='%aN' > .bob/var.commit-author
        - git log -1 --format='%aE' > .bob/var.commit-email
    - task: init environments
      docker-image: python3-builder
      docker-flags: &python-docker-flags
        - "--env PIPENV_VENV_IN_PROJECT=\"${env.PIPENV_VENV_IN_PROJECT}\""
        - "--env HOME=${env.HOME}"
        - "--env LC_ALL=en_US.utf-8"
        - "--env LANG=en_US.utf-8"
        - "--volume ${env.HOME}:${env.HOME}"
      cmd:
        - sh -c "pip install pipenv ; pushd "${main-service}" ; python3 -m 'pipenv' install --deploy --dev ; popd ; pushd ${assistant-service} ; python3 -m 'pipenv' install --deploy --dev"

  # CI-Internal Tasks: used by CI to use as temporary storage for testing, only CI user has write access.
  init-precodereview:
    - rule: init-common
    - task: preliminary-revision # For example: PA1
      cmd: RSTATE=${var.rstate} && echo P${RSTATE:2}1 > .bob/var.revision
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal
    - task: image-dr-vm-args
      cmd: echo " -DimageDesignRule.config.DR-D470203-041-A=disable -DimageDesignRule.config.DR-D470203-050-A=disable" > .bob/var.image-dr-vm-args

  # Drop level tasks: used by CI to publish artifacts after successful CI pipeline execution for a drop build
  init-drop:
    - rule: init-common
    - task: full-revision # For example: A (Note: The Letters I O P Q R W must never be used for Document Revisioning.
      cmd:
        - RSTATE=${var.rstate} && echo ${RSTATE:2} > .bob/var.revision
        - echo -cpi > .bob/var.rest2html-optional
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-repopath-drop
      cmd: echo "${image-drop-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-drop
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal
    - task: image-dr-vm-args
      cmd: echo "" > .bob/var.image-dr-vm-args


  lint:
    - task: markdownlint
      docker-image: adp-doc-builder
      cmd: bash -c 'markdownlint --config /etc/markdownlint-cli/adp.yaml $(git ls-files -- \*\.md | cat | xargs)' || true
    - task: vale
      docker-image: adp-doc-builder
      cmd: bash -c 'vale --output line --no-wrap $(git ls-files -- \*\.md | cat | xargs)' || true
    - task: helm
      docker-image: adp-helm-dr-check
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
      cmd: helm3 lint charts/${common.helm-chart-name}
    - task: helm-chart-check
      docker-image: adp-helm-dr-check
      cmd: sh -c "helm-dr-check --helm-chart charts/${common.helm-chart-name} ${enabled-helm-design-rules} ${exempt-helm-design-rules} --helm-v3 --output .bob/ || true"
    - task: license-check
      docker-image: google-add-license
      cmd: -check -f license/copyright.txt OSS*/**/*
    - task: static-code-analysis
      docker-image: python3-builder
      docker-flags: *python-docker-flags
      cmd:
        - sh -c "pip install pipenv ; set +e ; pushd "${main-service}" ; python3 -m 'pipenv' run tox -e isortcheck,flake8,blackcheck 2>&1 | tee ../.bob/static-code-analysis.log"
        - sh -c "pip install pipenv ; set +e ; pushd ${assistant-service} ; python3 -m 'pipenv' run tox -e isortcheck,flake8,blackcheck 2>&1 | tee ../.bob/static-code-analysis.log"

  test:
    - task: test-python
      docker-image: python3-builder
      docker-flags: *python-docker-flags
      cmd:
        - sh -c "pip install pipenv ; pushd '${main-service}' ; python3 -m 'pipenv' run coverage run --branch --source ArcSrv --omit '*/test/*' -m xmlrunner discover ArcSrv -o coverage_results/ ; python3 -m 'pipenv' run coverage xml -o 'cad-opt-coverage.xml'"
        - sh -c "pip install pipenv ; pushd '${assistant-service}' ; python3 -m 'pipenv' run coverage run --branch --source pm_data_handler --omit '*/test/*' -m xmlrunner discover pm_data_handler -o coverage_results/ ; python3 -m 'pipenv' run coverage xml -o 'pm-handler-coverage.xml'"
    - task: mvn-install
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd: mvn -f ${flow-directory}/arc-automation-flow/pom.xml ${env.MAVEN_CLI_OPTS} install

  sonar-enterprise-pcr:
    - task: generate-version-prefix
      cmd: cat VERSION_PREFIX > .bob/var.version-prefix
    - task: sonar-enterprise-sonarqube-analysis
      docker-image: adp-sonar-scanner
      cmd: sonar-scanner
        -Dsonar.login=${env.SONAR_AUTH_TOKEN}
        -Dsonar.host.url=${env.SONAR_HOST_URL}
        -Dsonar.branch.name=${var.version-prefix}-${env.GERRIT_CHANGE_NUMBER}
        -Dsonar.branch.target=${env.SONAR_BRANCH}

  sonar-enterprise-release:
    - task: sonarqube-analysis
      docker-image: adp-sonar-scanner
      cmd: sonar-scanner
        -Dsonar.login=${env.SONAR_AUTH_TOKEN}
        -Dsonar.host.url=${env.SONAR_HOST_URL}
        -Dsonar.projectVersion=${var.version}

  # Build a docker image pointing to dirty repository
  image:
    - task: docker-build
      cmd: docker build ${env.PWD}
        --file ./OSS_CAD_Service/Dockerfile
        --tag ${var.image-full-name-internal}:${var.version}
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg COMMIT=${var.commithash}
        --build-arg APP_VERSION=${var.version}
        --build-arg JAR_FILE=${common.project-artifact-id}-${var.version}.jar
        --build-arg RSTATE=${var.rstate}
        --build-arg IMAGE_PRODUCT_NUMBER=${common.image-product-number}
        --build-arg CBOS_IMAGE_TAG=${common.cbos-image-version}
        --build-arg CBOS_IMAGE_REPO=${common.cbos-image-repo}
        --build-arg CBOS_IMAGE_NAME=${common.cbos-image-name}

  # Check for image design rule compliance
  image-dr-check:
    - task: check-image-dr
      docker-image: adp-image-dr-check
      docker-in-docker: socket
      cmd: "image-dr-check
          --image ${var.image-full-name-internal}:${var.version}
          --output .bob/check-image/
          ${var.image-dr-vm-args}"
